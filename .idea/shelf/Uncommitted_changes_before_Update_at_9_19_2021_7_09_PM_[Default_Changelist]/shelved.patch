Index: app/src/main/java/my/edu/tarc/okuappg11/fragments/HomeFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package my.edu.tarc.okuappg11.fragments\r\n\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport android.os.Parcelable\r\nimport android.util.Log\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.Toast\r\nimport androidx.core.widget.AutoScrollHelper\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.navigation.fragment.findNavController\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport androidx.recyclerview.widget.LinearSnapHelper\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport androidx.recyclerview.widget.SnapHelper\r\nimport com.google.firebase.auth.FirebaseAuth\r\nimport com.google.firebase.firestore.*\r\nimport my.edu.tarc.okuappg11.R\r\nimport my.edu.tarc.okuappg11.activities.AllTopicsActivity\r\nimport my.edu.tarc.okuappg11.activities.ForgotPasswordActivity\r\nimport my.edu.tarc.okuappg11.data.AllEventsArrayList\r\nimport my.edu.tarc.okuappg11.databinding.FragmentHomeBinding\r\nimport my.edu.tarc.okuappg11.models.TopicsAdapter\r\nimport my.edu.tarc.okuappg11.models.TopicsModel\r\nimport my.edu.tarc.okuappg11.models.TrendingAdapter\r\nimport my.edu.tarc.okuappg11.models.TrendingModel\r\n\r\nclass HomeFragment : Fragment() {\r\n\r\n    private var _binding: FragmentHomeBinding? = null\r\n    private val binding get() = _binding!!\r\n    private lateinit var fAuth: FirebaseAuth\r\n    private lateinit var fStore: FirebaseFirestore\r\n\r\n    private var trendingList: ArrayList<TrendingModel> = ArrayList()\r\n    private var trendingListAdapter = TrendingAdapter(trendingList)\r\n    private lateinit var recyclerViewTrending : RecyclerView\r\n\r\n    private var topicList: ArrayList<TopicsModel> = ArrayList()\r\n    private var topicListAdapter = TopicsAdapter(topicList)\r\n    private lateinit var recyclerViewTopic : RecyclerView\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        arguments?.let {\r\n        }\r\n    }\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        _binding = FragmentHomeBinding.inflate(inflater, container, false)\r\n        return binding.root\r\n    }\r\n\r\n    //backup methods\r\n    private fun trendingListener2(){\r\n        fStore.collection(\"events\")\r\n                // to make it work, cannot use orderBy\r\n            .orderBy(\"startDate\", Query.Direction.ASCENDING)\r\n            .limit(5)\r\n            .addSnapshotListener{ snapshot, e->\r\n                if(e!=null){\r\n                    Toast.makeText(context, \"$e\", Toast.LENGTH_LONG).show()\r\n                    return@addSnapshotListener\r\n                }\r\n                if(snapshot != null){\r\n                    val document = snapshot.documents\r\n                    document.forEach{\r\n                        if (it.getString(\"status\").toString() == \"accepted\") {\r\n                            val trendingDetails = it.toObject(TrendingModel::class.java)\r\n                            if (trendingDetails != null) {\r\n                                trendingDetails.eventID = it.id\r\n                                trendingList.add(trendingDetails)\r\n                                Log.d(\"text\", trendingDetails.eventID)\r\n                            }\r\n                        }\r\n                    }\r\n                    trendingListAdapter.trendingList = trendingList\r\n                    trendingListAdapter.notifyDataSetChanged()\r\n                    if(trendingList.isEmpty()){\r\n                        Log.d(\"IsEmpty\", \"Array is empty\")\r\n                    } else {\r\n                        Log.d(\"IsNotEmpty\", \"Array is not empty\")\r\n                    }\r\n                }\r\n            }\r\n    }\r\n\r\n    private fun trendingListener(){\r\n        fStore.collection(\"events\")\r\n        .limit(5)\r\n        .addSnapshotListener(object : EventListener<QuerySnapshot> {\r\n            override fun onEvent(value: QuerySnapshot?, error: FirebaseFirestoreException?) {\r\n                if (error != null) {\r\n                    Log.e(\"Firestore Error\", error.message.toString())\r\n                    return\r\n                }\r\n                trendingList.clear()\r\n                value?.forEach {\r\n                    if (it.getString(\"status\").toString() == \"accepted\") {\r\n                        val trendingDetails = it.toObject(TrendingModel::class.java)\r\n                        if (trendingDetails != null) {\r\n                            trendingDetails.eventID = it.id\r\n                            trendingList.add(trendingDetails)\r\n                            Log.d(\"text\", trendingDetails.eventID)\r\n                        }\r\n                    }\r\n                }\r\n                trendingListAdapter.trendingList = trendingList\r\n                trendingListAdapter.notifyDataSetChanged()\r\n                if(trendingList.isEmpty()){\r\n                    Log.d(\"IsEmpty\", \"Array is empty\")\r\n                } else {\r\n                    Log.d(\"IsNotEmpty\", \"Array is not empty\")\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    private fun topicListener(){\r\n        fStore.collection(\"stories\")\r\n            .orderBy(\"storyCreatedDate\", Query.Direction.DESCENDING).limit(5)\r\n            .addSnapshotListener(object : EventListener<QuerySnapshot> {\r\n                override fun onEvent(value: QuerySnapshot?, error: FirebaseFirestoreException?) {\r\n                    if (error != null) {\r\n                        Log.e(\"Firestore Error\", error.message.toString())\r\n                        return\r\n                    }\r\n                    topicList.clear()\r\n                    value?.forEach {\r\n                        val topicDetails = it.toObject(TopicsModel::class.java)\r\n                        if (topicDetails != null) {\r\n                            topicDetails.storyID = it.id\r\n                            topicList.add(topicDetails)\r\n                            Log.d(\"text\", topicDetails.storyID)\r\n                        }\r\n                    }\r\n                    topicListAdapter.topicList = topicList\r\n                    topicListAdapter.notifyDataSetChanged()\r\n                }\r\n            })\r\n    }\r\n\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        fAuth = FirebaseAuth.getInstance()\r\n        fStore = FirebaseFirestore.getInstance()\r\n\r\n        recyclerViewTrending = binding.rvTrending\r\n        recyclerViewTrending.layoutManager = LinearLayoutManager(this.context, LinearLayoutManager.HORIZONTAL, false)\r\n        recyclerViewTrending.setHasFixedSize(true)\r\n\r\n        trendingList = arrayListOf()\r\n        trendingListAdapter = TrendingAdapter(trendingList)\r\n        recyclerViewTrending.adapter= trendingListAdapter\r\n        val snapHelper: SnapHelper = LinearSnapHelper()\r\n        snapHelper.attachToRecyclerView(recyclerViewTrending)\r\n\r\n        recyclerViewTopic = binding.rvTopics\r\n        recyclerViewTopic.layoutManager = LinearLayoutManager(this.context)\r\n        recyclerViewTopic.setHasFixedSize(true)\r\n\r\n        topicList = arrayListOf()\r\n        topicListAdapter = TopicsAdapter(topicList)\r\n        recyclerViewTopic.adapter= topicListAdapter\r\n\r\n        trendingListener()\r\n        topicListener()\r\n\r\n        binding.btnSeeAll.setOnClickListener {\r\n            val intent = Intent(activity, AllTopicsActivity::class.java)\r\n            startActivity(intent)\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/my/edu/tarc/okuappg11/fragments/HomeFragment.kt	(revision d051293437e83b35fe40b1f4e972e8f32fbc80f3)
+++ app/src/main/java/my/edu/tarc/okuappg11/fragments/HomeFragment.kt	(date 1632048208615)
@@ -92,7 +92,7 @@
 
     private fun trendingListener(){
         fStore.collection("events")
-        .limit(5)
+        .limit(6)
         .addSnapshotListener(object : EventListener<QuerySnapshot> {
             override fun onEvent(value: QuerySnapshot?, error: FirebaseFirestoreException?) {
                 if (error != null) {
Index: app/src/main/java/my/edu/tarc/okuappg11/activities/MyPostedEventActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package my.edu.tarc.okuappg11.activities\r\n\r\nimport android.content.Intent\r\nimport android.graphics.drawable.ColorDrawable\r\nimport android.os.Bundle\r\nimport android.os.Handler\r\nimport android.util.Log\r\nimport android.view.Menu\r\nimport android.view.MenuItem\r\nimport android.view.View\r\nimport android.view.ViewStub\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport com.google.firebase.auth.FirebaseAuth\r\nimport com.google.firebase.firestore.EventListener\r\nimport com.google.firebase.firestore.FirebaseFirestore\r\nimport com.google.firebase.firestore.FirebaseFirestoreException\r\nimport com.google.firebase.firestore.QuerySnapshot\r\nimport my.edu.tarc.okuappg11.R\r\nimport my.edu.tarc.okuappg11.data.PostedEventArrayList\r\nimport my.edu.tarc.okuappg11.databinding.ActivityMyPostedEventBinding\r\nimport my.edu.tarc.okuappg11.models.PostedEventAdapter\r\n\r\n\r\nclass MyPostedEventActivity : AppCompatActivity() {\r\n    private lateinit var fStore: FirebaseFirestore\r\n    private lateinit var fAuth: FirebaseAuth\r\n    private lateinit var binding: ActivityMyPostedEventBinding\r\n    private lateinit var recyclerView: RecyclerView\r\n    private lateinit var postedEventArrayList: ArrayList<PostedEventArrayList>\r\n    private lateinit var postedEventAdapter: PostedEventAdapter\r\n    private var userID: String? = null\r\n    private lateinit var viewStubPostedEvent: ViewStub\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        binding = ActivityMyPostedEventBinding.inflate(layoutInflater)\r\n        val view = binding.root\r\n        setContentView(view)\r\n\r\n        viewStubPostedEvent = binding.viewStubPostedEvent\r\n        viewStubPostedEvent.visibility = View.GONE\r\n\r\n        fAuth = FirebaseAuth.getInstance()\r\n        fStore = FirebaseFirestore.getInstance()\r\n        userID = fAuth.currentUser!!.uid\r\n\r\n        recyclerView = binding.recyclerViewPostedEvent\r\n        recyclerView.layoutManager = LinearLayoutManager(this)\r\n        recyclerView.setHasFixedSize(true)\r\n        recyclerView.visibility = View.GONE\r\n\r\n        postedEventArrayList = arrayListOf()\r\n        postedEventAdapter = PostedEventAdapter(postedEventArrayList)\r\n\r\n        recyclerView.adapter = postedEventAdapter\r\n\r\n        supportActionBar?.setDisplayHomeAsUpEnabled(true)\r\n        supportActionBar?.title = \"My Posted Events\"\r\n        supportActionBar?.setBackgroundDrawable(ColorDrawable(0xff000000.toInt()))\r\n\r\n        getData()\r\n        val handler = Handler()\r\n        handler.postDelayed(object: Runnable{\r\n            override fun run() {\r\n                if(postedEventArrayList.isEmpty()){\r\n                    viewStubPostedEvent.visibility = View.VISIBLE\r\n                    recyclerView.visibility = View.GONE\r\n                } else {\r\n                    viewStubPostedEvent.visibility = View.GONE\r\n                    recyclerView.visibility = View.VISIBLE\r\n                }\r\n            }\r\n        }, 1000)\r\n    }\r\n\r\n    override fun onCreateOptionsMenu(menu: Menu?): Boolean {\r\n        menuInflater.inflate(R.menu.my_posted_event, menu)\r\n        return super.onCreateOptionsMenu(menu)\r\n    }\r\n\r\n    override fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        when (item.getItemId()) {\r\n            R.id.action_add_events -> {\r\n                val intent = Intent(this, AddEventActivity::class.java)\r\n                intent.putExtra(\"addedBy\",\"eventorganizer\")\r\n                finish()\r\n                startActivity(intent)\r\n                return true\r\n            }\r\n            else -> {\r\n            }\r\n        }\r\n        return false\r\n    }\r\n\r\n    override fun onSupportNavigateUp(): Boolean {\r\n        onBackPressed()\r\n        return true\r\n    }\r\n\r\n    override fun onResume() {\r\n        super.onResume()\r\n        if(postedEventArrayList.isEmpty()){\r\n            viewStubPostedEvent.visibility = View.VISIBLE\r\n        } else {\r\n            viewStubPostedEvent.visibility = View.GONE\r\n        }\r\n\r\n        postedEventAdapter.notifyDataSetChanged()\r\n    }\r\n\r\n    private fun getData(){\r\n        fStore = FirebaseFirestore.getInstance()\r\n        fStore.collection(\"users\")\r\n            .document(userID!!)\r\n            .collection(\"postedEvent\")\r\n            .addSnapshotListener(object : EventListener<QuerySnapshot> {\r\n                override fun onEvent(value: QuerySnapshot?, error: FirebaseFirestoreException?) {\r\n                    if (error != null) {\r\n                        Log.e(\"Firestore Error\", error.message.toString())\r\n                        return\r\n                    }\r\n\r\n                    value?.forEach{\r\n                        fStore.collection(\"events\").document(it.id.toString()).get()\r\n                            .addOnSuccessListener {  dc ->\r\n                                Log.d(\"CHECKoutside\", dc.id)\r\n\r\n                                val postedEventDetails = dc.toObject(PostedEventArrayList::class.java)\r\n                                if(postedEventDetails != null){\r\n\r\n                                    //bmArrayList.userID=userID!!\r\n                                    postedEventDetails.eventId = dc.id\r\n                                    postedEventDetails.eventName = dc.getString(\"eventName\")\r\n                                    postedEventDetails.startDate= dc.getString(\"startDate\")\r\n                                    postedEventDetails.startTime= dc.getString(\"startTime\")\r\n                                    postedEventDetails.location = dc.getString(\"eventLocation\")\r\n                                    postedEventDetails.eventStatus = dc.getString(\"status\")\r\n                                    postedEventDetails.eventThumbnailURL = dc.getString(\"eventThumbnailURL\")\r\n                                    postedEventArrayList.add(postedEventDetails)\r\n                                    Log.d(\"CHECKINSIDE\", dc.id)\r\n                                    if(postedEventArrayList.isEmpty()){\r\n                                        Log.d(\"try again\",\"Array list is empty\")\r\n                                    } else {\r\n                                        Log.d(\"Got array\",\"Array list is not empty\")\r\n                                    }\r\n                                    postedEventAdapter.notifyDataSetChanged()\r\n\r\n\r\n                                }\r\n                            }.addOnFailureListener { exception ->\r\n                                Log.d(\"TAG\", \"get failed with \", exception)\r\n\r\n                            }\r\n\r\n                    }\r\n\r\n\r\n                    postedEventAdapter.notifyDataSetChanged()\r\n\r\n                    if(postedEventArrayList.isEmpty()){\r\n                        Log.d(\"try again\",\"Array list is empty\")\r\n                    } else {\r\n                        Log.d(\"Got array\",\"Array list is not empty\")\r\n                    }\r\n                }\r\n            })\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/my/edu/tarc/okuappg11/activities/MyPostedEventActivity.kt	(revision d051293437e83b35fe40b1f4e972e8f32fbc80f3)
+++ app/src/main/java/my/edu/tarc/okuappg11/activities/MyPostedEventActivity.kt	(date 1632047092936)
@@ -101,6 +101,7 @@
     }
 
     override fun onResume() {
+
         super.onResume()
         if(postedEventArrayList.isEmpty()){
             viewStubPostedEvent.visibility = View.VISIBLE
@@ -112,6 +113,9 @@
     }
 
     private fun getData(){
+
+        postedEventAdapter.notifyDataSetChanged()
+
         fStore = FirebaseFirestore.getInstance()
         fStore.collection("users")
             .document(userID!!)
@@ -167,6 +171,7 @@
                     }
                 }
             })
+        postedEventAdapter.notifyDataSetChanged()
     }
 
 }
\ No newline at end of file
Index: app/src/main/java/my/edu/tarc/okuappg11/activities/UpdateEvent.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package my.edu.tarc.okuappg11.activities\r\n\r\nimport android.Manifest\r\nimport android.app.Activity\r\nimport android.content.ContentValues\r\nimport android.content.Intent\r\nimport android.content.pm.PackageManager\r\nimport android.net.Uri\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport android.os.Handler\r\nimport android.util.Log\r\nimport android.widget.Toast\r\nimport androidx.core.app.ActivityCompat\r\nimport androidx.core.content.ContextCompat\r\nimport com.google.android.material.datepicker.MaterialDatePicker\r\nimport com.google.android.material.dialog.MaterialAlertDialogBuilder\r\nimport com.google.android.material.timepicker.MaterialTimePicker\r\nimport com.google.android.material.timepicker.TimeFormat\r\nimport com.google.firebase.auth.FirebaseAuth\r\nimport com.google.firebase.firestore.DocumentReference\r\nimport com.google.firebase.firestore.FirebaseFirestore\r\nimport com.google.firebase.storage.FirebaseStorage\r\nimport com.google.firebase.storage.StorageReference\r\nimport my.edu.tarc.okuappg11.R\r\nimport my.edu.tarc.okuappg11.databinding.ActivityUpdateEventBinding\r\nimport my.edu.tarc.okuappg11.models.Constants\r\nimport my.edu.tarc.okuappg11.progressdialog.AddEventDialog\r\nimport my.edu.tarc.okuappg11.utils.GlideLoader\r\nimport java.text.SimpleDateFormat\r\nimport java.util.*\r\n\r\nclass UpdateEvent : AppCompatActivity() {\r\n    private lateinit var binding: ActivityUpdateEventBinding\r\n    private val dialogAddEvent = AddEventDialog(this)\r\n\r\n    private var firestoreCheck:Boolean = false\r\n    private var storageCheck:Boolean = false\r\n    private var mSelectedImageFileUri: Uri? = null\r\n    private var eventId:String? = null\r\n    private var eventName:String? = null\r\n    private var eventDescription:String? = null\r\n    private var startDate:String? = null\r\n    private var startTime:String? = null\r\n    private var eventDuration:String? = null\r\n    private lateinit var fAuth: FirebaseAuth\r\n    private lateinit var fStore: FirebaseFirestore\r\n    private var eventOrganizer:String? = null\r\n    private var eventOrganizerUID:String? =null\r\n    private var eventLocation:String? = null\r\n    private var latitude:Double?= null\r\n    private var longitude:Double?= null\r\n    private var eventThumbnailURL:String? = null\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        binding = ActivityUpdateEventBinding.inflate(layoutInflater)\r\n        val view = binding.root\r\n        setContentView(view)\r\n        eventId = intent.getStringExtra(\"EventUID\")\r\n        fAuth = FirebaseAuth.getInstance()\r\n        fStore = FirebaseFirestore.getInstance()\r\n\r\n        supportActionBar?.title = \"Edit Event\"\r\n        supportActionBar?.setDisplayHomeAsUpEnabled(true)\r\n\r\n        binding.textFieldUpdateEventOrganizerName.editText!!.isEnabled=false\r\n        binding.textFieldUpdateDateStart.editText!!.isEnabled=false\r\n        binding.textFieldUpdateTime.editText!!.isEnabled=false\r\n\r\n        getData()\r\n\r\n\r\n        binding.btnSelectDate.setOnClickListener{\r\n            if(!binding.rbUpdateSingleDay.isChecked && !binding.rbUpdateMultiday.isChecked){\r\n                Toast.makeText(this, R.string.select_duration_event, Toast.LENGTH_LONG).show()\r\n\r\n            }else {\r\n                if (binding.rbUpdateSingleDay.isChecked) {\r\n                    val datePicker =\r\n                        MaterialDatePicker.Builder.datePicker()\r\n                            .setTitleText(\"Select date\")\r\n                            .setSelection(MaterialDatePicker.todayInUtcMilliseconds())\r\n                            .build()\r\n\r\n                    datePicker.show(supportFragmentManager, \"tag\")\r\n\r\n\r\n                    datePicker.addOnPositiveButtonClickListener {\r\n                        eventDuration=\"1\"\r\n                        binding.textFieldUpdateDateStart.editText?.setText(datePicker.headerText)\r\n                    }\r\n                }\r\n\r\n\r\n\r\n                if (binding.rbUpdateMultiday.isChecked) {\r\n                    val today: Long = MaterialDatePicker.todayInUtcMilliseconds();\r\n\r\n                    val todayPair = Pair(today, today)\r\n\r\n\r\n                    val dateRangePicker =\r\n                        MaterialDatePicker.Builder.dateRangePicker()\r\n                            .setTitleText(\"Select dates\")\r\n                            .build()\r\n\r\n                    dateRangePicker.show(supportFragmentManager, \"tag\")\r\n                    dateRangePicker.addOnPositiveButtonClickListener {\r\n                        eventDuration = \"2\"\r\n                        binding.textFieldUpdateDateStart.editText?.setText(dateRangePicker.headerText)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        binding.btnSelectTime.setOnClickListener{\r\n            val picker =\r\n                MaterialTimePicker.Builder()\r\n                    .setTimeFormat(TimeFormat.CLOCK_12H)\r\n                    .setHour(12)\r\n                    .setMinute(10)\r\n                    .setTitleText(\"Select Appointment time\")\r\n                    .build()\r\n\r\n            picker.show(supportFragmentManager, \"tag\");\r\n\r\n            picker.addOnPositiveButtonClickListener {\r\n                val cal = Calendar.getInstance()\r\n                cal.set(Calendar.HOUR_OF_DAY, picker.hour)\r\n                cal.set(Calendar.MINUTE, picker.minute)\r\n                val formattedDate = SimpleDateFormat(\"HH:mm\").format(cal.time)\r\n                binding.textFieldUpdateTime.editText?.setText(formattedDate)\r\n            }\r\n\r\n        }\r\n\r\n        binding.ivUpdateEventThumbnail.setOnClickListener{\r\n            if(ContextCompat.checkSelfPermission(\r\n                    this,\r\n                    Manifest.permission.READ_EXTERNAL_STORAGE\r\n                ) == PackageManager.PERMISSION_GRANTED\r\n            ){\r\n                //Toast.makeText(this,\"You already have storage permission\", Toast.LENGTH_SHORT).show()\r\n                Constants.showImageChooser(this)\r\n\r\n\r\n\r\n            }else{\r\n                ActivityCompat.requestPermissions(\r\n                    this,\r\n                    arrayOf(Manifest.permission.READ_EXTERNAL_STORAGE),\r\n                    Constants.READ_STORAGE_PERMISSION_CODE\r\n                )\r\n            }\r\n        }\r\n\r\n        binding.btnPickPlace.setOnClickListener{\r\n            //saveData()\r\n            val intent = Intent(this@UpdateEvent, MapAutocompleteActivity::class.java)\r\n            startActivityForResult(intent, 3)\r\n        }\r\n\r\n\r\n        binding.btnUpdate.setOnClickListener{\r\n            if (validateEventDetails()) {\r\n                MaterialAlertDialogBuilder(this)\r\n                    .setTitle(resources.getString(R.string.dialog_update_title))\r\n                    .setMessage(resources.getString(R.string.dialog_update_description))\r\n                    .setNegativeButton(resources.getString(R.string.dialog_update_negative)) { dialog, which ->\r\n                        Toast.makeText(this,R.string.update_cancel,Toast.LENGTH_SHORT).show()\r\n                    }\r\n                    .setPositiveButton(resources.getString(R.string.dialog_update_positive)) { dialog, which ->\r\n                        eventName = binding.textFieldUpdateEventName.editText!!.text.toString()\r\n                        eventDescription = binding.textFieldUpdateEventDescription.editText!!.text.toString()\r\n                        startDate = binding.textFieldUpdateDateStart.editText!!.text.toString()\r\n                        startTime = binding.textFieldUpdateTime.editText!!.text.toString()\r\n                        val dateNow = Calendar.getInstance().time\r\n                        val formattedDateNow = SimpleDateFormat(\"dd/MM/yyyy\").format(dateNow)\r\n\r\n                        Log.d(\"check\", eventId.toString())\r\n                        if(mSelectedImageFileUri != null) {\r\n\r\n                            val sRef: StorageReference = FirebaseStorage.getInstance().reference.child(\r\n                                Constants.USER_PROFILE_IMAGE + eventId + \".\"\r\n                                        + Constants.getFileExtension(\r\n                                    this,\r\n                                    mSelectedImageFileUri\r\n                                )\r\n                            )\r\n\r\n\r\n                            sRef.putFile(mSelectedImageFileUri!!).addOnSuccessListener { taskSnapshot ->\r\n                                Log.e(\r\n                                    \"Firebase Image\",\r\n                                    taskSnapshot.metadata!!.reference!!.downloadUrl.toString()\r\n                                )\r\n\r\n                                taskSnapshot.metadata!!.reference!!.downloadUrl\r\n                                    .addOnSuccessListener { uri ->\r\n                                        Log.e(\"Downloadable Image URL\", uri.toString())\r\n                                        eventThumbnailURL = uri.toString()\r\n                                        storageCheck = true\r\n                                    }\r\n                                    .addOnFailureListener { exception ->\r\n                                        Log.e(\"ERROR\", exception.message.toString())\r\n                                    }\r\n                            }\r\n                        }\r\n\r\n                        dialogAddEvent.startLoading()\r\n                        val hashMapEvents = hashMapOf(\r\n                            \"eventName\" to eventName,\r\n                            \"eventDescription\" to eventDescription,\r\n                            \"startDate\" to startDate,\r\n                            \"startTime\" to startTime,\r\n                            \"eventDuration\" to eventDuration,\r\n                            \"eventOrganizerName\" to eventOrganizer,\r\n                            \"eventOrganizerUID\" to eventOrganizerUID,\r\n                            \"eventLocation\" to eventLocation,\r\n                            \"eventCreatedDate\" to formattedDateNow,\r\n                            \"status\" to \"pending\",\r\n                            \"latitude\" to latitude,\r\n                            \"longitude\" to longitude,\r\n                            \"eventThumbnailURL\" to eventThumbnailURL\r\n\r\n                        )\r\n                        val ref: DocumentReference = fStore.collection(\"events\").document(eventId!!)\r\n\r\n                        ref.update(hashMapEvents as Map<String, Any>)\r\n                            .addOnSuccessListener {\r\n                                Toast.makeText(this,R.string.update_success,Toast.LENGTH_SHORT).show()\r\n                                Log.d(ContentValues.TAG, \"Added Document\")\r\n                                firestoreCheck=true\r\n\r\n                            }\r\n                            .addOnFailureListener {\r\n                                Log.w(ContentValues.TAG, \"Error adding document ${it.suppressedExceptions}\")\r\n                            }\r\n\r\n                        val handler = Handler()\r\n                        handler.postDelayed(object: Runnable{\r\n                            override fun run() {\r\n                                //  val sharedPreferences:SharedPreferences = getSharedPreferences(\"sharedPreferences\", Context.MODE_PRIVATE)\r\n                                //  val editor = sharedPreferences.edit()\r\n                                // editor.clear()\r\n                                // editor.apply()\r\n                                val intent = Intent(this@UpdateEvent, AdminEventDetailsActivity::class.java)\r\n                                intent.putExtra(\"EventUID\",\"${eventId.toString()}\")\r\n                                startActivity(intent)\r\n                                dialogAddEvent.isDismiss()\r\n\r\n                            }\r\n                        }, 5000)\r\n                    }\r\n                    .show()\r\n\r\n\r\n            }else{\r\n                if (binding.textFieldUpdateEventName.editText!!.text.isEmpty()){\r\n                    binding.textFieldUpdateEventName.editText!!.setError(\"This field cannot be empty\")\r\n\r\n                }\r\n\r\n                if(binding.textFieldUpdateEventDescription.editText!!.text.isEmpty()){\r\n                    binding.textFieldUpdateEventDescription.editText!!.setError(\"This field cannot be empty\")\r\n\r\n                }\r\n\r\n                if(binding.textFieldUpdateLocation.editText!!.text.isEmpty()){\r\n                    binding.textFieldUpdateLocation.editText!!.setError(\"Please select event location through the button.\")\r\n                }\r\n\r\n                if(binding.textFieldUpdateDateStart.editText!!.text.isEmpty()){\r\n                    binding.textFieldUpdateDateStart.editText!!.setError(\"Please select the date through the button.\")\r\n                }\r\n\r\n                if(binding.textFieldUpdateTime.editText!!.text.isEmpty()){\r\n                    binding.textFieldUpdateTime.editText!!.setError(\"Please select the time through the button.\")\r\n                }\r\n\r\n            }\r\n\r\n\r\n        }\r\n\r\n    }\r\n\r\n    private fun validateEventDetails(): Boolean {\r\n        if (binding.textFieldUpdateEventName.editText!!.text.isEmpty() ||\r\n            binding.textFieldUpdateEventDescription.editText!!.text.isEmpty() ||\r\n            binding.textFieldUpdateDateStart.editText!!.text.isEmpty() ||\r\n            binding.textFieldUpdateTime.editText!!.text.isEmpty()){\r\n            return false\r\n        }else{\r\n            return true\r\n        }\r\n    }\r\n\r\n    override fun onSupportNavigateUp(): Boolean {\r\n        onBackPressed()\r\n        return true\r\n    }\r\n\r\n    private fun getData() {\r\n        val docRef = fStore.collection(\"events\").document(eventId!!)\r\n        docRef.get()\r\n            .addOnSuccessListener { document ->\r\n                if (document != null) {\r\n                    eventName = document.getString(\"eventName\")\r\n                    eventDescription = document.getString(\"eventDescription\")\r\n                    eventOrganizer = document.getString(\"eventOrganizerName\")\r\n                    eventDuration = document.getString(\"eventDuration\")\r\n                    eventOrganizerUID = document.getString(\"eventOrganizerUID\")\r\n                    startDate = document.getString(\"startDate\")\r\n                    startTime = document.getString(\"startTime\")\r\n                    eventLocation = document.getString(\"eventLocation\")\r\n                    latitude = document.getDouble(\"latitude\")\r\n                    longitude = document.getDouble(\"longitude\")\r\n                    eventThumbnailURL = document.getString(\"eventThumbnailURL\")\r\n                    binding.textFieldUpdateEventName.editText!!.setText(eventName)\r\n                    binding.textFieldUpdateEventDescription.editText!!.setText(eventDescription)\r\n                    binding.textFieldUpdateEventOrganizerName.editText!!.setText(eventOrganizer)\r\n\r\n                    if(eventDuration == \"1\"){\r\n                        binding.rbUpdateSingleDay.isChecked= true\r\n                    }else{\r\n                        binding.rbUpdateSingleDay.isChecked = true\r\n                    }\r\n\r\n                    binding.textFieldUpdateDateStart.editText!!.setText(startDate)\r\n                    binding.textFieldUpdateTime.editText!!.setText(startTime)\r\n                    binding.textFieldUpdateLocation.editText!!.setText(eventLocation)\r\n                    GlideLoader(this).loadUserPicture(Uri.parse(eventThumbnailURL)!!,binding.ivUpdateEventThumbnail)\r\n\r\n                } else {\r\n                    Log.d(\"HEY\", \"No such document\")\r\n                }\r\n            }\r\n            .addOnFailureListener { exception ->\r\n                Log.d(\"TAG\", \"get failed with \", exception)\r\n            }\r\n    }\r\n    override fun onRequestPermissionsResult(\r\n        requestCode: Int,\r\n        permissions: Array<out String>,\r\n        grantResults: IntArray\r\n    ) {\r\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults)\r\n        if(requestCode == Constants.READ_STORAGE_PERMISSION_CODE){\r\n            //granted\r\n            if(grantResults.isNotEmpty() && grantResults[0] == PackageManager.PERMISSION_GRANTED){\r\n                //Toast.makeText(this,\"Storage permission granted\", Toast.LENGTH_LONG).show()\r\n                Constants.showImageChooser(this)\r\n\r\n\r\n            }else{\r\n                //display another toast if permission not granted\r\n                Toast.makeText(this,R.string.storage_permission_denied, Toast.LENGTH_LONG).show()\r\n\r\n            }\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n    @Suppress(\"DEPRECATION\")\r\n    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\r\n        super.onActivityResult(requestCode, resultCode, data)\r\n        if(requestCode == Constants.PICK_IMAGE_REQUEST_CODE){\r\n            if (resultCode== Activity.RESULT_OK){\r\n\r\n                if (data !=null){\r\n                    try{\r\n                        //uri of image\r\n                        mSelectedImageFileUri = data.data!!\r\n                        GlideLoader(this).loadUserPicture(mSelectedImageFileUri!!, binding.ivUpdateEventThumbnail)\r\n                    }catch(e: Exception){\r\n                        Toast.makeText(this, R.string.image_selection_fail, Toast.LENGTH_LONG).show()\r\n                    }\r\n                }\r\n            }\r\n        }else if (resultCode == Activity.RESULT_CANCELED){\r\n            Log.e(\"REQUEST CANCELLED\", \"Image selection cancelled\")\r\n        }\r\n\r\n        if(requestCode == 3){\r\n            if(resultCode == RESULT_OK){\r\n                eventLocation = data!!.getStringExtra(\"eventLocation\")\r\n                latitude = data!!.getStringExtra(\"latitude\")?.toDouble()\r\n                longitude = data!!.getStringExtra(\"longitude\")?.toDouble()\r\n                binding.textFieldUpdateLocation.editText!!.setText(eventLocation)\r\n\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/my/edu/tarc/okuappg11/activities/UpdateEvent.kt	(revision d051293437e83b35fe40b1f4e972e8f32fbc80f3)
+++ app/src/main/java/my/edu/tarc/okuappg11/activities/UpdateEvent.kt	(date 1632048237677)
@@ -195,48 +195,49 @@
                                     "Firebase Image",
                                     taskSnapshot.metadata!!.reference!!.downloadUrl.toString()
                                 )
+                                dialogAddEvent.startLoading()
 
                                 taskSnapshot.metadata!!.reference!!.downloadUrl
                                     .addOnSuccessListener { uri ->
                                         Log.e("Downloadable Image URL", uri.toString())
                                         eventThumbnailURL = uri.toString()
                                         storageCheck = true
-                                    }
-                                    .addOnFailureListener { exception ->
-                                        Log.e("ERROR", exception.message.toString())
-                                    }
-                            }
-                        }
-
-                        dialogAddEvent.startLoading()
-                        val hashMapEvents = hashMapOf(
-                            "eventName" to eventName,
-                            "eventDescription" to eventDescription,
-                            "startDate" to startDate,
-                            "startTime" to startTime,
-                            "eventDuration" to eventDuration,
-                            "eventOrganizerName" to eventOrganizer,
-                            "eventOrganizerUID" to eventOrganizerUID,
-                            "eventLocation" to eventLocation,
-                            "eventCreatedDate" to formattedDateNow,
-                            "status" to "pending",
-                            "latitude" to latitude,
-                            "longitude" to longitude,
-                            "eventThumbnailURL" to eventThumbnailURL
+                                        val hashMapEvents = hashMapOf(
+                                            "eventName" to eventName,
+                                            "eventDescription" to eventDescription,
+                                            "startDate" to startDate,
+                                            "startTime" to startTime,
+                                            "eventDuration" to eventDuration,
+                                            "eventOrganizerName" to eventOrganizer,
+                                            "eventOrganizerUID" to eventOrganizerUID,
+                                            "eventLocation" to eventLocation,
+                                            "eventCreatedDate" to formattedDateNow,
+                                            "status" to "pending",
+                                            "latitude" to latitude,
+                                            "longitude" to longitude,
+                                            "eventThumbnailURL" to eventThumbnailURL
 
-                        )
-                        val ref: DocumentReference = fStore.collection("events").document(eventId!!)
+                                        )
+                                        val ref: DocumentReference = fStore.collection("events").document(eventId!!)
 
-                        ref.update(hashMapEvents as Map<String, Any>)
-                            .addOnSuccessListener {
-                                Toast.makeText(this,R.string.update_success,Toast.LENGTH_SHORT).show()
-                                Log.d(ContentValues.TAG, "Added Document")
-                                firestoreCheck=true
+                                        ref.update(hashMapEvents as Map<String, Any>)
+                                            .addOnSuccessListener {
+                                                Toast.makeText(this,R.string.update_success,Toast.LENGTH_SHORT).show()
+                                                Log.d(ContentValues.TAG, "Added Document")
+                                                firestoreCheck=true
 
-                            }
-                            .addOnFailureListener {
-                                Log.w(ContentValues.TAG, "Error adding document ${it.suppressedExceptions}")
+                                            }
+                                            .addOnFailureListener {
+                                                Log.w(ContentValues.TAG, "Error adding document ${it.suppressedExceptions}")
+                                            }
+                                    }
+                                    .addOnFailureListener { exception ->
+                                        Log.e("ERROR", exception.message.toString())
+                                    }
                             }
+                        }
+
+
 
                         val handler = Handler()
                         handler.postDelayed(object: Runnable{
@@ -247,6 +248,7 @@
                                 // editor.apply()
                                 val intent = Intent(this@UpdateEvent, AdminEventDetailsActivity::class.java)
                                 intent.putExtra("EventUID","${eventId.toString()}")
+                                intent.putExtra("addedBy", "admin")
                                 startActivity(intent)
                                 dialogAddEvent.isDismiss()
 
Index: app/src/main/res/layout/list_item_topics.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><androidx.cardview.widget.CardView xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"wrap_content\"\r\n    android:layout_marginStart=\"16dp\"\r\n    android:layout_marginLeft=\"16dp\"\r\n    android:layout_marginTop=\"12dp\"\r\n    android:layout_marginEnd=\"16dp\"\r\n    android:layout_marginRight=\"16dp\"\r\n    app:cardCornerRadius=\"9dp\"\r\n    app:cardElevation=\"8dp\"\r\n    app:layout_constraintEnd_toEndOf=\"parent\"\r\n    app:layout_constraintStart_toStartOf=\"parent\"\r\n    app:layout_constraintTop_toTopOf=\"parent\">\r\n\r\n\r\n    <androidx.constraintlayout.widget.ConstraintLayout\r\n        android:id=\"@+id/constraintLayout3\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"match_parent\">\r\n\r\n        <ImageView\r\n            android:id=\"@+id/ivTopic\"\r\n            android:layout_width=\"0dp\"\r\n            android:layout_height=\"0dp\"\r\n            android:scaleType=\"centerCrop\"\r\n            app:layout_constraintBottom_toBottomOf=\"parent\"\r\n            app:layout_constraintEnd_toStartOf=\"@+id/linearLayout5Topic\"\r\n            app:layout_constraintStart_toStartOf=\"parent\"\r\n            app:layout_constraintTop_toTopOf=\"parent\"\r\n            tools:srcCompat=\"@tools:sample/avatars\" />\r\n\r\n        <LinearLayout\r\n            android:id=\"@+id/linearLayout5Topic\"\r\n            android:layout_width=\"228dp\"\r\n            android:layout_height=\"143dp\"\r\n            android:background=\"#393939\"\r\n            android:orientation=\"vertical\"\r\n            android:paddingLeft=\"20dp\"\r\n            android:paddingTop=\"12dp\"\r\n            android:paddingRight=\"20dp\"\r\n            android:paddingBottom=\"12dp\"\r\n            app:layout_constraintBottom_toBottomOf=\"parent\"\r\n            app:layout_constraintEnd_toEndOf=\"parent\"\r\n            app:layout_constraintStart_toEndOf=\"@+id/ivSearch\"\r\n            app:layout_constraintTop_toTopOf=\"@+id/ivSearch\">\r\n\r\n            <TextView\r\n                android:id=\"@+id/nameTopic\"\r\n                android:layout_width=\"wrap_content\"\r\n                android:layout_height=\"45dp\"\r\n                android:layout_marginBottom=\"10dp\"\r\n                android:fontFamily=\"@font/poppins_medium\"\r\n                android:text=\"Run For A Chance 2020\"\r\n                android:textColor=\"@color/white\"\r\n                android:textSize=\"16sp\"\r\n                android:textStyle=\"bold\" />\r\n\r\n            <View\r\n                android:id=\"@+id/divider2Story\"\r\n                android:layout_width=\"198dp\"\r\n                android:layout_height=\"1dp\"\r\n                android:layout_marginBottom=\"3dp\"\r\n                android:background=\"#9A9A9A\"\r\n                android:divider=\"@color/white\"\r\n                android:dividerHeight=\"1dp\"\r\n                tools:background=\"@color/white\"\r\n                tools:layout_marginBottom=\"10dp\"\r\n                tools:layout_marginTop=\"10dp\" />\r\n\r\n            <TextView\r\n                android:id=\"@+id/tvIDStory\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:text=\"TextView\"\r\n                android:textColor=\"#292929\"\r\n                android:textSize=\"2sp\" />\r\n\r\n            <TextView\r\n                android:id=\"@+id/storyThumbnailDesc\"\r\n                android:layout_width=\"192dp\"\r\n                android:layout_height=\"47dp\"\r\n                android:layout_marginTop=\"10dp\"\r\n                android:fontFamily=\"@font/poppins_medium\"\r\n                android:text=\"31 Aug - 16 Sep\"\r\n                android:textColor=\"@color/white\"\r\n                android:textSize=\"11sp\" />\r\n\r\n        </LinearLayout>\r\n    </androidx.constraintlayout.widget.ConstraintLayout>\r\n</androidx.cardview.widget.CardView>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/list_item_topics.xml	(revision d051293437e83b35fe40b1f4e972e8f32fbc80f3)
+++ app/src/main/res/layout/list_item_topics.xml	(date 1632047868043)
@@ -74,8 +74,8 @@
                 android:layout_width="match_parent"
                 android:layout_height="wrap_content"
                 android:text="TextView"
-                android:textColor="#292929"
-                android:textSize="2sp" />
+                android:textColor="#393939"
+                android:textSize="0sp" />
 
             <TextView
                 android:id="@+id/storyThumbnailDesc"
